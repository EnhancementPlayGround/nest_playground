name: CI/CD
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: package install
        run: npm ci
      - name: build
        run: npm run build
      - name: lint & test
        run: |
          npm run lint
          npm test
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: generate iamge tag
        id: generate_image_tag
        run: echo "::set-output name=tag::$(date +'%Y.%m.%d.%H%M%S')"
      - name: docker image push to ECR
        run: |
          $(aws ecr get-login --no-include-email --region ${{ secrets.AWS_REGION }})
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.generate_image_tag.outputs.tag }} .
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.generate_image_tag.outputs.tag }}
